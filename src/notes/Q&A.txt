1. What is GraphQL?
GraphQL is a query language for APIs. Instead of sending a request to backend to a specific endpoint 
(backend returns a response, backend determines the shape of returned data),
GraphQL lets the frontend make a request and defining what props it wants to have returned from database.
2. Can we use both GraphQL and Redux?
No, they are in conflict.
3. What means the exclamation mark in GraphQL?
It means that the field is mandatory, without it the field is optional.

type Collection {
    id: ID! // this is a specific ID from GraphQL - a String but also unique
    title: String!
    items: [Item!]!
}

type Item {
    id: ID!
    name: String!
    price: Float! // for floating point numbers
    imageUrl: String!
    collection: Collection // it is only so that GraphQL can connect Item to a Collection
}

4. How to write a simple get query without parameters?

Shaped like an object but no commas.
query {
  collections {
    id
    title
    items {
      id
      name
      price
      imageUrl
    }
}

5. How to write a query with parameters?

First create a variable in Query variables tab: 
{"id": "cjwuuj5bz000i0719rrtw5gqk"}

query($id: ID!) { // at the top level we need to specify what variables are going to be used, exclamation mark must be there - the type must exactly match the schema
  collection(id: $id) {
    id,
    title, 
    items {
      id
      name
      price
      imageUrl
    }
  }
}

6. Can we call multiple requests in one query?
Yes.
Like so:
query($id: ID!) {
  collection(id: $id) {
    id,
    title, 
    items {
      id
      name
      price
      imageUrl
    }
  }
  collections {
    id
    title
  }
}

The result is shaped like this:

{
  "data": {
    "collection": {
      "id": "cjwuuj5bz000i0719rrtw5gqk",
      "title": "Hats",
      "items": [
        {
          "id": "cjwuuj5ip000j0719taw0mjdz",
          "name": "Brown Brim",
          "price": 25,
          "imageUrl": "https://i.ibb.co/ZYW3VTp/brown-brim.png"
        },
        {
          "id": "cjwuuj5j4000l0719l3ialwkj",
          "name": "Blue Beanie",
          "price": 18,
          "imageUrl": "https://i.ibb.co/ypkgK0X/blue-beanie.png"
        },
        {
          "id": "cjwuuj5je000n0719ch6nbhik",
          "name": "Brown Cowboy",
          "price": 35,
          "imageUrl": "https://i.ibb.co/QdJwgmp/brown-cowboy.png"
        },
        {
          "id": "cjwuuj5jh000p0719rtjatb2f",
          "name": "Grey Brim",
          "price": 25,
          "imageUrl": "https://i.ibb.co/RjBLWxB/grey-brim.png"
        },
        {
          "id": "cjwuuj5jp000r07198x90aciu",
          "name": "Green Beanie",
          "price": 18,
          "imageUrl": "https://i.ibb.co/YTjW3vF/green-beanie.png"
        },
        {
          "id": "cjwuuj5jy000t0719hgrbwczg",
          "name": "Palm Tree Cap",
          "price": 14,
          "imageUrl": "https://i.ibb.co/rKBDvJX/palm-tree-cap.png"
        },
        {
          "id": "cjwuuj5k0000v0719yug39d50",
          "name": "Red Beanie",
          "price": 18,
          "imageUrl": "https://i.ibb.co/bLB646Z/red-beanie.png"
        },
        {
          "id": "cjwuuj5k5000x071945jq904o",
          "name": "Wolf Cap",
          "price": 14,
          "imageUrl": "https://i.ibb.co/1f2nWMM/wolf-cap.png"
        },
        {
          "id": "cjwuuj5k7000z0719j89wlop9",
          "name": "Blue Snapback",
          "price": 16,
          "imageUrl": "https://i.ibb.co/X2VJP2W/blue-snapback.png"
        }
      ]
    },
    "collections": [
      {
        "id": "cjwuuj5bz000i0719rrtw5gqk",
        "title": "Hats"
      },
      {
        "id": "cjwuun2fa001907195roo7iyk",
        "title": "Jackets"
      },
      {
        "id": "cjwuuprqs00240719lb9kvlqe",
        "title": "Mens"
      },
      {
        "id": "cjwuva2zz003f07193pv1xavh",
        "title": "Sneakers"
      },
      {
        "id": "cjwuvbix2003y071935qfqr7a",
        "title": "Womens"
      }
    ]
  }
}

7. What is the difference between uri and url paths?
Url is the entire path with http or https - it contains the location. (Uniform resource locator)
Uri can be the entire path but enough would be the domain name just after https. (Uniform resource identifier)

8. What is the ApolloClient? 
ApolloClient is something that requires the GraphQL server in the frontend application.

9. Why apollo uses caching?
For the same reason as any other tool, when you request for the exact same data that you requested before it looks into cache and takes the value from it.
Thanks to that we have the local copy of the requested data.

10. How can we name a query?

query GetCollectionByID($id: ID!) {
  collection(id: $id) {
    id,
    title, 
    items {
      id
      name
      price
      imageUrl
    }
  }
}

11. How to define a query inside of React app?
First wrap the whole application with ApolloProvider.
Then define a query:

const COLLECTIONS = gql`
  query GetCollections {
    collections {
      id
      title
      items {
        id
        name
        price
        imageUrl
      }
    }
  }
`;

const { loading, error, data } = useQuery(COLLECTIONS);

12. How to spread through object and remain all properties but one?

category.items.map((item) => {
    const { __typename, ...otherProps } = item;
    return otherProps;
})

13. How to reduce on array to convert an array into a map (one object)?
const dataMap = collections.reduce((acc, category) => {
return {
    ...acc,
    ...{
    [category.title.toLowerCase()]: category.items.map((item) => {
        const { __typename, ...otherProps } = item;
        return otherProps;
    }),
    },
};
}, {});

or 

const dataMap = collections.reduce((acc, category) => {
    const { title, items } = category;
    acc[title.toLowerCase()] = items.map((item) => {
        const { __typename, ...otherProps } = item;
        return otherProps;
    });
    return acc;
}, {});

14. How to pass a variable into useQuery in React?

const GET_CATEGORY = gql`
  query GetCollectionsByTitle($title: String!) {
    getCollectionsByTitle(title: $title) {
      id
      title
      items {
        id
        name
        price
        imageUrl
      }
    }
  }
`;

  const { data, loading } = useQuery(GET_CATEGORY, {
    variables: {
      title: category,
    },
  });

15. How does caching works in apollo?
It caches the query (if the parameters haven't changed and were called before) - it will not make another call,
it will just take the value from the cache.
Less request = better performance.

16. How to write a mutation in GraphQL?

const ADD_TODO = gql`

    mutation AddTodo($type: String!) {
        addTodo(type: $type) {
            id
            type
        }
    }

`

const [addTodo, {data, loading, error}] = useMutation(ADD_TODO);

const handleOnSubmit = () => {
    addTodo({variables: {type: "New"}})
}

17. How does useCallback works?
useCallback memoizes the function (not the return of the function!), so that it doesn't reinitialize and recalculate on every component render.
Whenever the dependencies change it will recalculate and again store the value (the function) in a cache.

const onCheckoutHandler = useCallback(() => {
    navigate("/checkout");
}, []) // this will throw a warning saying to include navigate but navigate actually will not change but react doesn't know it

Option 1.
Include navigate in the dependencies array as long as you understand that this is not something that is going to change and make the function recalculate.

Option 2.
Do not include it and comment out using eslint comment, so that it is very clear that this function will be rendered only once on mount.

If you forget to include a dependency and you are depending on it in the callback, it will always be the same initial value, 
because the function was store with this initial value and although the component rerendered, the function was never reinitialized,
it was simply taken from the cache.

18. What is useMemo hook?
It works similarly to useCallback hook but stored in cache the return value of a function. 

19. What is memo from React and when do we need to wrap a component with it?
memo lets you skip re-rendering a component when its props are unchanged.
Wrap a component in memo to get a memoized version of that component.

React normally re-renders a component whenever its parent re-renders.

With memo, 
you can create a component that React will not re-render when its parent re-renders 
so long as its new props are the same as the old props.

Even with memo, your component will re-render if its own state changes or if a context that itâ€™s using changes.
It won't rerender only if the parent rerendered. So for example it is useful for lists (products.map) to wrap the child component in memo.
As we are adding to the list (the previously added elements aren't rerendered as we add more products).

You can wrap it like so:

import { memo } from "react";
import { CartItemContainer, ItemDetails } from "./cart-item.styles";

const CartItem = memo(({ cartItem }) => {
  const { name, imageUrl, price, quantity } = cartItem;
  return (
    <CartItemContainer>
      <img src={imageUrl} alt={`${name}`} />
      <ItemDetails>
        <span>{name}</span>
        <span>
          {quantity} x ${price}
        </span>
      </ItemDetails>
    </CartItemContainer>
  );
});

export default CartItem;

Or simply at the end:
export default memo(CartItem);


20. What are higher-order components in React?
A higher-order component (HOC) is an advanced technique in React for reusing component logic, as mentioned in the React Docs. 
A HOC is not a part of the React API, but it is just a function with a component as an argument and returns a new component.

21. What is React.memo?
React.memo is a higher-order function. 
It is used to memoize the result of our component, which helps to boost the performance of our React application.
In simple terms, if our component returns the same result for the same prop values passed to it, 
then rendering the same result ruins the performance of the application. 

22. What is a higher order function?

A function which takes another function as an argument 
or returns a function is known as a higher order function.

We know that JavaScript provides us with some 
inbuilt higher order functions like map(), filter(), reduce().
Map takes a function as argument!

We can also return a function from a function:

function calculate(operation) {
  switch (operation) {
    case "ADD":
      return function (a, b) {
        console.log(`${a} + ${b} = ${a + b}`);
      };
    case "SUBTRACT":
      return function (a, b) {
        console.log(`${a} - ${b} = ${a - b}`);
      };
  }
}

const calculateAdd = calculate("ADD");
calculateAdd(2, 3);
// Output: 2 + 3 = 5

Call the returned function using double parentheses
This is a very sophisticated way of calling the inner returned function. 

calculate("ADD")(2, 3);
// Output: 2 + 3 = 5



